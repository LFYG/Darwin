GDB 使用 ios arm 版
添加 Cydia 源 cydia.radare.org
然後安裝 GNU Debugger、adv-cmds、openssh。
ssh 登入到 IOS，執行 IOS 內的終端機指令。

=============================
除錯方式
=============================
* 附加程序
$ ps aux -c | grep "app name"
366 ??         1:50.90 /path/sb

$ gdb -p 366

* 載入應用程式
$ gdb
(gdb) file exe
(gdb) set args argument1 argument2
(gdb) run

=============================
查看載入基址與載入函式庫
=============================
(gdb) info sh

=============================
設置中斷點
=============================
(gdb) break 或 b *
設置中斷點須設在「基址+偏移」的RVA位址

在已知函式下斷點
(gdb) b CFRunLoopRunInMode

在指定偏移下斷點
(gdb) b * 0x1d0ec

查看中斷訊息
(gdb) info break 或 (gdb) i b

刪除中斷點
delete 1
取消中斷點
disable 1
啟用中斷點
enable 1

後面的數字是中斷點的編號

=============================
操作命令
=============================
單步執行 相當於 OD F8
(gdb) ni 

單步步入 相當於 OD F7
(gdb) si

繼續運行 相當於 OD F9
(gdb) Continue 或 c

結束目前函式到返回
(gdb) finish

=============================
暫存器與記憶體查詢
=============================
查看全部暫存器訊息
(gdb) info reg

查看 R0 暫存器訊息
(gdb) info reg r0

查看 PC 暫存器訊息 (等同EIP)
(gdb) info reg pc

查看目前呼叫的堆疊
(gdb) Backtrace 或 bt

列印暫存器10進位
(gdb) p $r0
列印暫存器16進位
(gdb) p/x $r0

列印指標
(gdb) info f
Stack level 0, frame at 0x1afaf0:
 pc = 0x690ec in _mh_execute_header; saved pc 0x690ec
 called by frame at 0x1afaf0
 Arglist at 0x1afaf0, args:
 Locals at 0x1afaf0,

列印指標一級
(gdb) p/x *0x1afaf0

列印指標二級
(gdb) p/x **0x1afaf0

列印 flag 暫存器
(gdb) p $cpsr

列印指標 object
(gdb) po $r0
/private/var..

=============================
檢視操作代碼 (OP Code)
=============================
查看說明
(gdb) help x

檢視目前 pc 操作代碼
(gdb) x/5i $pc
或
(gdb) x/5ih $pc

=============================
修改命令
=============================
設定暫存器數值
(gdb) set $r0=100

設定pc位址
(gdb) set $pc=0x69000
